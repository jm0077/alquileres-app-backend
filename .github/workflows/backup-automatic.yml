name: 📦 Backup Automático Alquileres

on:
  # Ejecutar backup el día 28 de cada mes a las 23:00 UTC (antes del proceso recurrente)
  schedule:
    - cron: '0 23 28 * *'
  
  # Permitir ejecución manual
  workflow_dispatch:
    inputs:
      includeDetails:
        description: 'Incluir detalles completos (expenses e incomes)'
        required: false
        type: boolean
        default: true

jobs:
  backup-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Información del backup
      run: |
        echo "📦 Iniciando backup automático de alquileres"
        echo "📅 Fecha: $(date)"
        echo "🌍 Timezone: UTC"
        echo "💾 Tipo: Backup completo"
        echo "🔗 API URL: ${{ secrets.ALQUILERES_API_URL }}"

    - name: 🔍 Verificar conectividad con la API
      run: |
        echo "🔍 Verificando que la API esté activa..."
        
        # Intentar conectar al endpoint principal
        HEALTH_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" \
          -H "User-Agent: GitHub-Backup/1.0" \
          --connect-timeout 30 \
          --max-time 60 \
          "${{ secrets.ALQUILERES_API_URL }}/" || echo "CURL_FAILED")
        
        if [[ "$HEALTH_RESPONSE" == "CURL_FAILED" ]]; then
          echo "❌ No se puede conectar a la API"
          echo "🔧 Verificar:"
          echo "   • URL del secret: ${{ secrets.ALQUILERES_API_URL }}"
          echo "   • Que Render esté activo"
          echo "   • Que no haya errores en el servicio"
          exit 1
        fi
        
        HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
        echo "📊 Status de conectividad: $HEALTH_STATUS"
        
        if [[ "$HEALTH_STATUS" != "200" ]]; then
          echo "❌ API no responde correctamente (Status: $HEALTH_STATUS)"
          echo "🔧 Revisar logs de Render"
          exit 1
        fi
        
        echo "✅ API está activa y respondiendo"

    - name: 📥 Realizar backup completo
      run: |
        echo "📥 Descargando backup completo..."
        
        # Configurar parámetros
        INCLUDE_DETAILS="${{ github.event.inputs.includeDetails || 'true' }}"
        
        # Generar nombre de archivo con timestamp
        TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
        FILENAME="alquileres-backup-$TIMESTAMP.json"
        
        echo "📁 Archivo: $FILENAME"
        echo "📊 Incluir detalles: $INCLUDE_DETAILS"
        
        # Realizar llamada al API de backup con timeout extendido
        HTTP_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" \
          -H "User-Agent: GitHub-Actions-Backup/1.0" \
          -H "Accept: application/json" \
          --connect-timeout 30 \
          --max-time 300 \
          "${{ secrets.ALQUILERES_API_URL }}/api/backup?includeDetails=$INCLUDE_DETAILS" \
          -o "$FILENAME")
        
        HTTP_STATUS=$(echo "$HTTP_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
        
        echo "📊 HTTP Status: $HTTP_STATUS"
        
        if [[ "$HTTP_STATUS" != "200" ]]; then
          echo "❌ Error en el backup: HTTP $HTTP_STATUS"
          if [[ -f "$FILENAME" ]]; then
            echo "📋 Contenido de la respuesta:"
            head -20 "$FILENAME"
          fi
          exit 1
        fi
        
        # Verificar que el archivo se descargó
        if [[ -f "$FILENAME" ]]; then
          FILE_SIZE=$(stat -c%s "$FILENAME" 2>/dev/null || stat -f%z "$FILENAME" 2>/dev/null || echo "0")
          echo "✅ Backup descargado exitosamente"
          echo "📊 Tamaño del archivo: $FILE_SIZE bytes"
          
          if [[ "$FILE_SIZE" -lt 100 ]]; then
            echo "❌ Archivo muy pequeño, posible error"
            echo "📋 Contenido:"
            cat "$FILENAME"
            exit 1
          fi
          
          # Verificar que es un JSON válido
          if jq '.' "$FILENAME" > /dev/null 2>&1; then
            echo "✅ JSON válido confirmado"
            
            # Extraer estadísticas del backup
            PROPERTIES_COUNT=$(jq -r '.stats.properties // 0' "$FILENAME")
            UNITS_COUNT=$(jq -r '.stats.unitsIndependent // 0' "$FILENAME")
            TOTAL_EXPENSES=$(jq -r '.stats.totalExpenses // 0' "$FILENAME")
            TOTAL_INCOMES=$(jq -r '.stats.totalIncomes // 0' "$FILENAME")
            EXPORT_DATE=$(jq -r '.exportDate // "N/A"' "$FILENAME")
            
            echo "📊 Estadísticas del backup:"
            echo "   • Propiedades: $PROPERTIES_COUNT"
            echo "   • Unidades independientes: $UNITS_COUNT"
            echo "   • Total egresos: $TOTAL_EXPENSES"
            echo "   • Total ingresos: $TOTAL_INCOMES"
            echo "   • Fecha de exportación: $EXPORT_DATE"
            
            # Guardar nombre del archivo para el siguiente step
            echo "BACKUP_FILENAME=$FILENAME" >> $GITHUB_ENV
            echo "FILE_SIZE_BYTES=$FILE_SIZE" >> $GITHUB_ENV
            echo "PROPERTIES_COUNT=$PROPERTIES_COUNT" >> $GITHUB_ENV
            echo "UNITS_COUNT=$UNITS_COUNT" >> $GITHUB_ENV
            echo "TOTAL_EXPENSES=$TOTAL_EXPENSES" >> $GITHUB_ENV
            echo "TOTAL_INCOMES=$TOTAL_INCOMES" >> $GITHUB_ENV
            
          else
            echo "❌ Error: El archivo descargado no es un JSON válido"
            echo "📋 Primeras líneas del archivo:"
            head -20 "$FILENAME"
            exit 1
          fi
          
        else
          echo "❌ Error: No se pudo descargar el backup"
          exit 1
        fi

    - name: 💾 Guardar backup como artifact
      uses: actions/upload-artifact@v4
      with:
        name: backup-alquileres-${{ github.run_number }}
        path: ${{ env.BACKUP_FILENAME }}
        retention-days: 90
        compression-level: 6

    - name: 🔍 Validar integridad del backup
      run: |
        echo "🔍 Validando integridad del backup..."
        
        FILENAME="${{ env.BACKUP_FILENAME }}"
        
        if [[ -f "$FILENAME" ]]; then
          # Verificar estructura básica
          HAS_VERSION=$(jq -r '.version // "missing"' "$FILENAME")
          HAS_EXPORT_DATE=$(jq -r '.exportDate // "missing"' "$FILENAME")
          HAS_STRUCTURE=$(jq -r '.structure // "missing"' "$FILENAME")
          
          echo "📋 Verificación de estructura:"
          echo "   • Version: $HAS_VERSION"
          echo "   • Export Date: $HAS_EXPORT_DATE"  
          echo "   • Structure: $HAS_STRUCTURE"
          
          # Verificar que tiene las secciones principales
          HAS_PROPERTIES=$(jq -r 'has("properties")' "$FILENAME")
          HAS_UNITS=$(jq -r 'has("units")' "$FILENAME")
          HAS_STATS=$(jq -r 'has("stats")' "$FILENAME")
          
          echo "📊 Verificación de secciones:"
          echo "   • Properties: $HAS_PROPERTIES"
          echo "   • Units: $HAS_UNITS"
          echo "   • Stats: $HAS_STATS"
          
          if [[ "$HAS_PROPERTIES" == "true" ]] && [[ "$HAS_UNITS" == "true" ]] && [[ "$HAS_STATS" == "true" ]]; then
            echo "✅ Backup validado exitosamente"
          else
            echo "❌ Error: Estructura del backup incompleta"
            exit 1
          fi
          
        else
          echo "❌ Error: No se encontró archivo de backup"
          exit 1
        fi

    - name: 📊 Generar reporte de backup
      if: success()
      run: |
        echo "📊 Generando reporte final del backup..."
        
        FILENAME="${{ env.BACKUP_FILENAME }}"
        FILE_SIZE="${{ env.FILE_SIZE_BYTES }}"
        
        # Calcular tamaño en MB
        FILE_SIZE_MB=$(echo "scale=2; $FILE_SIZE/1024/1024" | bc -l)
        
        # Generar hash MD5
        FILE_HASH=$(md5sum "$FILENAME" | cut -d' ' -f1)
        
        echo "📁 Información del archivo:"
        echo "   • Nombre: $FILENAME"
        echo "   • Tamaño: $FILE_SIZE_MB MB"
        echo "   • Hash MD5: $FILE_HASH"
        
        # Crear summary para GitHub
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## 📦 Backup Automático Completado ✅
        
        ### 📁 Archivo de Backup
        
        | Información | Valor |
        |-------------|--------|
        | 📁 Nombre | \`$FILENAME\` |
        | 📊 Tamaño | $FILE_SIZE_MB MB |
        | 🔒 Hash MD5 | \`$FILE_HASH\` |
        | 📅 Fecha | $(date) |
        
        ### 📊 Contenido del Backup
        
        | Tipo de Datos | Cantidad |
        |---------------|----------|
        | 🏠 Propiedades | ${{ env.PROPERTIES_COUNT }} |
        | 🏢 Unidades independientes | ${{ env.UNITS_COUNT }} |
        | 💸 Total egresos | ${{ env.TOTAL_EXPENSES }} |
        | 💰 Total ingresos | ${{ env.TOTAL_INCOMES }} |
        
        ### 💾 Almacenamiento
        
        - ✅ **Guardado como GitHub Artifact**
        - 📅 **Retención:** 90 días
        - 📥 **Descarga:** Actions → Artifacts
        - 🗜️ **Compresión:** Nivel 6
        
        ### 🔧 Información Técnica
        - **API Endpoint:** \`GET /api/backup\`
        - **Formato:** JSON
        - **Estructura:** Real (adaptada a Firebase)
        - **Status:** ✅ Validado
        
        ---
        **🔄 Próximo backup automático:** Día 28 del siguiente mes
        
        EOF

    - name: 🔔 Notificación final
      if: always()
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "🎉 Backup completado exitosamente"
          echo "✅ Archivo guardado como GitHub Artifact"
          echo "📥 Para descargar: Actions → Artifacts → backup-alquileres-${{ github.run_number }}"
          echo "📅 Retención: 90 días"
          echo "📅 Próximo backup: 28 del siguiente mes"
        else
          echo "⚠️ El backup falló"
          echo "🔧 Pasos para resolver:"
          echo "   1. Verificar que la API esté activa en Render"
          echo "   2. Revisar el secret ALQUILERES_API_URL"
          echo "   3. Verificar logs de la API"
          echo "   4. Probar manualmente: ${{ secrets.ALQUILERES_API_URL }}/api/backup"
        fi
        
        echo "📋 Workflow de backup finalizado: $(date)"
