name: 🔄 Generar Egresos Recurrentes

on:
  # Ejecutar automáticamente el día 1 de cada mes a las 2:00 AM UTC
  schedule:
    - cron: '0 2 1 * *'
  
  # Permitir ejecución manual desde GitHub
  workflow_dispatch:
    inputs:
      targetYear:
        description: 'Año destino (opcional)'
        required: false
        type: string
      targetMonth:
        description: 'Mes destino (opcional)'
        required: false
        type: string
      dryRun:
        description: 'Solo simular (no crear registros)'
        required: false
        type: boolean
        default: false

jobs:
  generate-recurring-expenses:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📋 Información del workflow
      run: |
        echo "🔄 Generando egresos recurrentes de alquileres"
        echo "📅 Fecha: $(date)"
        echo "🎯 Target: Siguiente mes automático"
        
    - name: 🚀 Generar registros recurrentes
      run: |
        echo "🔄 Iniciando generación de egresos recurrentes..."
        
        # Preparar datos para la API
        if [[ -n "${{ github.event.inputs.targetYear }}" ]] && [[ -n "${{ github.event.inputs.targetMonth }}" ]]; then
          # Usar parámetros manuales
          PAYLOAD=$(cat <<EOF
        {
          "targetYear": ${{ github.event.inputs.targetYear }},
          "targetMonth": ${{ github.event.inputs.targetMonth }},
          "dryRun": ${{ github.event.inputs.dryRun || false }}
        }
        EOF
        )
          echo "📊 Usando parámetros manuales: Año ${{ github.event.inputs.targetYear }}, Mes ${{ github.event.inputs.targetMonth }}"
        else
          # Usar automático (siguiente mes)
          PAYLOAD='{"dryRun": false}'
          echo "📅 Usando siguiente mes automático"
        fi
        
        echo "📤 Payload: $PAYLOAD"
        
        # Realizar llamada a la API (ARREGLADO: Content-Type correcto)
        RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions-Alquileres/1.0" \
          -H "Accept: application/json" \
          --connect-timeout 30 \
          --max-time 120 \
          -d "$PAYLOAD" \
          "${{ secrets.ALQUILERES_API_URL }}/api/recurring/generate")
        
        # Separar respuesta y código HTTP
        HTTP_BODY=$(echo "$RESPONSE" | sed -n '1,/HTTP_STATUS:/p' | sed '$d')
        HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
        
        echo "📊 HTTP Status: $HTTP_STATUS"
        echo "📋 Respuesta completa:"
        echo "$HTTP_BODY" | jq '.' 2>/dev/null || echo "$HTTP_BODY"
        
        # Verificar si fue exitoso
        if [[ "$HTTP_STATUS" == "200" ]]; then
          echo "✅ Generación completada exitosamente"
          
          # Extraer estadísticas de la respuesta JSON
          if echo "$HTTP_BODY" | jq '.' > /dev/null 2>&1; then
            TOTAL_CREATED=$(echo "$HTTP_BODY" | jq -r '.summary.totalCreated // 0')
            TOTAL_SKIPPED=$(echo "$HTTP_BODY" | jq -r '.summary.totalSkipped // 0') 
            TOTAL_ERRORS=$(echo "$HTTP_BODY" | jq -r '.summary.totalErrors // 0')
            PROPERTIES_PROCESSED=$(echo "$HTTP_BODY" | jq -r '.summary.propertiesProcessed // 0')
            DRY_RUN=$(echo "$HTTP_BODY" | jq -r '.summary.dryRun // false')
            
            echo "📊 Estadísticas:"
            echo "   • Propiedades procesadas: $PROPERTIES_PROCESSED"
            echo "   • Egresos creados: $TOTAL_CREATED"
            echo "   • Egresos omitidos: $TOTAL_SKIPPED"
            echo "   • Errores: $TOTAL_ERRORS"
            echo "   • Modo simulación: $DRY_RUN"
            
            # Crear summary para GitHub
            cat >> $GITHUB_STEP_SUMMARY << EOF
        ## 🔄 Generación de Egresos Recurrentes Completada ✅
        
        ### 📊 Resultado: Exitoso
        
        | Métrica | Valor |
        |---------|--------|
        | 🏠 Propiedades procesadas | $PROPERTIES_PROCESSED |
        | ✅ Egresos creados | $TOTAL_CREATED |
        | ⏭️ Egresos omitidos | $TOTAL_SKIPPED |
        | ❌ Errores | $TOTAL_ERRORS |
        | 🧪 Modo simulación | $DRY_RUN |
        
        ### 📅 Información del proceso
        - **Fecha de ejecución:** $(date)
        - **Método:** $([ "$DRY_RUN" == "true" ] && echo "Simulación" || echo "Generación real")
        - **API:** \`POST /api/recurring/generate\`
        
        EOF
            
            if [[ "$TOTAL_ERRORS" -gt 0 ]]; then
              echo "⚠️ Se encontraron $TOTAL_ERRORS errores durante la generación"
              echo "📋 Revisar respuesta completa arriba para más detalles"
            fi
            
            if [[ "$TOTAL_CREATED" -eq 0 ]] && [[ "$DRY_RUN" == "false" ]]; then
              echo "ℹ️ No se crearon nuevos egresos - posibles causas:"
              echo "   • No hay egresos marcados como recurrentes (isRecurring: true)"
              echo "   • Los egresos ya fueron generados para este período"
              echo "   • No hay propiedades con egresos en el mes fuente"
            fi
            
          else
            echo "⚠️ La respuesta no es JSON válido, pero el status es 200"
          fi
          
        else
          echo "❌ Error en la generación: HTTP $HTTP_STATUS"
          echo "📋 Respuesta del servidor:"
          echo "$HTTP_BODY"
          
          # Crear summary de error para GitHub
          cat >> $GITHUB_STEP_SUMMARY << EOF
        ## 🔄 Generación de Egresos Recurrentes Falló ❌
        
        ### ❌ Error HTTP: $HTTP_STATUS
        
        **Respuesta del servidor:**
        \`\`\`
        $HTTP_BODY
        \`\`\`
        
        ### 🔧 Posibles soluciones:
        
        1. **Si es HTTP 400:** Verificar formato del payload JSON
        2. **Si es HTTP 404:** Verificar que la ruta sea correcta
        3. **Si es HTTP 500:** Revisar logs del servidor en Render
        4. **Si es timeout:** La API puede estar ocupada o dormida
        
        **Fecha:** $(date)
        **URL:** ${{ secrets.ALQUILERES_API_URL }}/api/recurring/generate
        EOF
          
          exit 1
        fi

    - name: 📊 Obtener resumen post-generación
      if: success()
      run: |
        echo "📊 Obteniendo resumen del estado actual..."
        
        # Obtener fecha actual para verificar
        CURRENT_YEAR=$(date +%Y)
        CURRENT_MONTH=$(date +%-m)
        
        # Llamar al endpoint de resumen
        SUMMARY_RESPONSE=$(curl -s \
          -H "User-Agent: GitHub-Actions-Alquileres/1.0" \
          -H "Accept: application/json" \
          --connect-timeout 30 \
          --max-time 60 \
          "${{ secrets.ALQUILERES_API_URL }}/api/recurring/summary?year=$CURRENT_YEAR&month=$CURRENT_MONTH")
        
        echo "📋 Resumen actual:"
        echo "$SUMMARY_RESPONSE" | jq '.' 2>/dev/null || echo "$SUMMARY_RESPONSE"
        
        # Extraer información del resumen si es JSON válido
        if echo "$SUMMARY_RESPONSE" | jq '.' > /dev/null 2>&1; then
          TOTAL_PROPERTIES=$(echo "$SUMMARY_RESPONSE" | jq -r '.summary.properties // 0')
          TOTAL_EXPENSES=$(echo "$SUMMARY_RESPONSE" | jq -r '.summary.totalExpenses // 0')
          RECURRING_EXPENSES=$(echo "$SUMMARY_RESPONSE" | jq -r '.summary.totalRecurringExpenses // 0')
          
          echo "📊 Estado del sistema:"
          echo "   • Total propiedades: $TOTAL_PROPERTIES"
          echo "   • Total egresos del mes: $TOTAL_EXPENSES" 
          echo "   • Egresos recurrentes: $RECURRING_EXPENSES"
          
          # Agregar al summary de GitHub
          cat >> $GITHUB_STEP_SUMMARY << EOF
        
        ### 📊 Estado Actual del Sistema
        
        | Métrica | Valor |
        |---------|--------|
        | 🏠 Total propiedades | $TOTAL_PROPERTIES |
        | 💰 Egresos del mes actual | $TOTAL_EXPENSES |
        | 🔄 Egresos recurrentes | $RECURRING_EXPENSES |
        
        > Consulta realizada para **$CURRENT_MONTH/$CURRENT_YEAR**
        EOF
        else
          echo "⚠️ No se pudo obtener resumen válido del sistema"
        fi

    - name: 🔔 Notificación de finalización
      if: always()
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "🎉 Proceso completado exitosamente"
          echo "📧 Los egresos recurrentes han sido procesados"
          echo "🔍 Revisar el summary arriba para detalles"
        else
          echo "⚠️ El proceso falló"
          echo "🔧 Revisar los logs arriba para identificar el problema"
          echo "💡 Intentar ejecución manual para debugging"
        fi
        
        echo "📋 Workflow finalizado: $(date)"
